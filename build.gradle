/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.jetbrains.intellij' version "0.3.11"
    id "org.jetbrains.kotlin.jvm" version "1.2.31"
}

dependencies {
    compile fileTree(dir: "libs", includes: ["*.jar"])
}

sourceSets {
    main {
        java.srcDirs 'gen'
        resources {
            exclude "debugger/**"
        }
    }
}

// Appveyor CI
if (System.env['APPVEYOR']) {
    version = System.env['APPVEYOR_BUILD_VERSION']
    exec {
        executable "git"
        args "config", "--global", "user.email", "love.tangzx@qq.com"
    }
    exec {
        executable "git"
        args "config", "--global", "user.name", "tangzx"
    }
}

ext {
    getRev = {
        def os = new ByteArrayOutputStream()
        def e = exec {
            executable "git"
            args "rev-parse"
            args "HEAD"
            standardOutput = os
        }
        return os.toString().substring(0, 7)
    }

    setDefaultProperty = { name, defaultValue ->
        if (!this.hasProperty(name))
            ext[name] = defaultValue
    }
}

setDefaultProperty("IDEA_VER", "182")

version = "${version}-IDEA${IDEA_VER}"

def cfg = [
    ideaSDKVersion: ideaSDKVersion,
    sinceBuild: sinceBuild,
    untilBuild: untilBuild,
    archiveName: archiveName
]
def rev = getRev()

intellij {
    type 'IU'
    updateSinceUntilBuild false
    downloadSources false
    version = cfg.ideaSDKVersion
    localPath System.env["IDEA_HOME_${IDEA_VER}"]
}

patchPluginXml {
    sinceBuild cfg.sinceBuild
    untilBuild cfg.untilBuild
}

publishPlugin {
    username System.env['JETBRAINS_USERNAME']
    password System.env['JETBRAINS_PASSWORD']
    channels 'EAP'
}

def RES_DIR = "src/main/resources"

buildPlugin.baseName = cfg.archiveName

def isWin = Os.isFamily(Os.FAMILY_WINDOWS)

if (isWin) {
    task copyAttachDebugger(dependsOn: ["debugger:attach:windows:buildProduct"], type: Copy) {
        from(fileTree(dir: 'debugger/attach/windows/build/', includes: ['x64/**', 'x86/**']))
        destinationDir file("${RES_DIR}/debugger/windows")
    }

    buildPlugin.dependsOn(copyAttachDebugger)
    buildPlugin.from(fileTree(dir: RES_DIR, includes: ['debugger/**'])) {
        into "/${project.name}/classes/"
    }
    buildPlugin.from(fileTree(dir: RES_DIR, include: '!!DONT_UNZIP_ME!!.txt')) {
        into "/${project.name}"
    }
}

// apply patchs before build plugin
task buildPluginWithBunch() {
    finalizedBy buildPlugin
    doLast {
        // reset
        exec {
            executable "git"
            args "reset", "HEAD", "--hard"
        }
        // clean untracked files
        exec {
            executable "git"
            args "clean", "-d", "-f"
        }
        // switch
        exec {
            executable isWin ? "bunch/bin/bunch.bat" : "bunch/bin/bunch"
            args "switch", ".", IDEA_VER
        }
        // reset to HEAD
        exec {
            executable "git"
            args "reset", rev
        }
    }
}
